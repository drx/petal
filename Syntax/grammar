-----------------------------------------------------------------------------
Info file generated by Happy Version 1.18.2 from Syntax/Parser.y
-----------------------------------------------------------------------------


-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_parse -> program1                           (0)
	value -> Int                                       (1)
	value -> Name                                      (2)
	value -> Register                                  (3)
	instruction -> Register Assign value               (4)
	instruction -> Register Assign Register Plus value   (5)
	instruction -> If Register Jump value              (6)
	instructionSeq -> Name Colon instructions Jump value   (7)
	instructionSeq -> Name Colon Delimiter instructions Jump value   (8)
	instructions -> instruction Delimiter instructions   (9)
	instructions ->                                    (10)
	program -> instructionSeq                          (11)
	program -> instructionSeq Delimiter                (12)
	program -> instructionSeq Delimiter program        (13)
	program1 -> program                                (14)
	program1 -> Delimiter program                      (15)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	Assign         { (_,TkAssign) }
	Colon          { (_,TkColon) }
	Delimiter      { (_,TkDelimiter) }
	If             { (_,TkIf) }
	Int            { (_,TkInt $$) }
	Jump           { (_,TkJump) }
	Name           { (_,TkName $$) }
	Register       { (_,TkRegister $$) }
	Plus           { (_,TkPlus) }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_parse    rule  0
	value           rules 1, 2, 3
	instruction     rules 4, 5, 6
	instructionSeq  rules 7, 8
	instructions    rules 9, 10
	program         rules 11, 12, 13
	program1        rules 14, 15

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0


	Delimiter      shift, and enter state 6
	Name           shift, and enter state 7

	instructionSeq goto state 3
	program        goto state 4
	program1       goto state 5

State 1


	Int            shift, and enter state 2


State 2

	value -> Int .                                      (rule 1)

	Delimiter      reduce using rule 1
	%eof           reduce using rule 1


State 3

	program -> instructionSeq .                         (rule 11)
	program -> instructionSeq . Delimiter               (rule 12)
	program -> instructionSeq . Delimiter program       (rule 13)

	Delimiter      shift, and enter state 10
	%eof           reduce using rule 11


State 4

	program1 -> program .                               (rule 14)

	%eof           reduce using rule 14


State 5

	%start_parse -> program1 .                          (rule 0)

	%eof           accept


State 6

	program1 -> Delimiter . program                     (rule 15)

	Name           shift, and enter state 7

	instructionSeq goto state 3
	program        goto state 9

State 7

	instructionSeq -> Name . Colon instructions Jump value    (rule 7)
	instructionSeq -> Name . Colon Delimiter instructions Jump value    (rule 8)

	Colon          shift, and enter state 8


State 8

	instructionSeq -> Name Colon . instructions Jump value    (rule 7)
	instructionSeq -> Name Colon . Delimiter instructions Jump value    (rule 8)

	Delimiter      shift, and enter state 14
	If             shift, and enter state 15
	Jump           reduce using rule 10
	Register       shift, and enter state 16

	instruction    goto state 12
	instructions   goto state 13

State 9

	program1 -> Delimiter program .                     (rule 15)

	%eof           reduce using rule 15


State 10

	program -> instructionSeq Delimiter .               (rule 12)
	program -> instructionSeq Delimiter . program       (rule 13)

	Name           shift, and enter state 7
	%eof           reduce using rule 12

	instructionSeq goto state 3
	program        goto state 11

State 11

	program -> instructionSeq Delimiter program .       (rule 13)

	%eof           reduce using rule 13


State 12

	instructions -> instruction . Delimiter instructions    (rule 9)

	Delimiter      shift, and enter state 21


State 13

	instructionSeq -> Name Colon instructions . Jump value    (rule 7)

	Jump           shift, and enter state 20


State 14

	instructionSeq -> Name Colon Delimiter . instructions Jump value    (rule 8)

	If             shift, and enter state 15
	Jump           reduce using rule 10
	Register       shift, and enter state 16

	instruction    goto state 12
	instructions   goto state 19

State 15

	instruction -> If . Register Jump value             (rule 6)

	Register       shift, and enter state 18


State 16

	instruction -> Register . Assign value              (rule 4)
	instruction -> Register . Assign Register Plus value    (rule 5)

	Assign         shift, and enter state 17


State 17

	instruction -> Register Assign . value              (rule 4)
	instruction -> Register Assign . Register Plus value    (rule 5)

	Int            shift, and enter state 2
	Name           shift, and enter state 24
	Register       shift, and enter state 29

	value          goto state 28

State 18

	instruction -> If Register . Jump value             (rule 6)

	Jump           shift, and enter state 27


State 19

	instructionSeq -> Name Colon Delimiter instructions . Jump value    (rule 8)

	Jump           shift, and enter state 26


State 20

	instructionSeq -> Name Colon instructions Jump . value    (rule 7)

	Int            shift, and enter state 2
	Name           shift, and enter state 24
	Register       shift, and enter state 25

	value          goto state 23

State 21

	instructions -> instruction Delimiter . instructions    (rule 9)

	If             shift, and enter state 15
	Jump           reduce using rule 10
	Register       shift, and enter state 16

	instruction    goto state 12
	instructions   goto state 22

State 22

	instructions -> instruction Delimiter instructions .    (rule 9)

	Jump           reduce using rule 9


State 23

	instructionSeq -> Name Colon instructions Jump value .    (rule 7)

	Delimiter      reduce using rule 7
	%eof           reduce using rule 7


State 24

	value -> Name .                                     (rule 2)

	Delimiter      reduce using rule 2
	%eof           reduce using rule 2


State 25

	value -> Register .                                 (rule 3)

	Delimiter      reduce using rule 3
	%eof           reduce using rule 3


State 26

	instructionSeq -> Name Colon Delimiter instructions Jump . value    (rule 8)

	Int            shift, and enter state 2
	Name           shift, and enter state 24
	Register       shift, and enter state 25

	value          goto state 32

State 27

	instruction -> If Register Jump . value             (rule 6)

	Int            shift, and enter state 2
	Name           shift, and enter state 24
	Register       shift, and enter state 25

	value          goto state 31

State 28

	instruction -> Register Assign value .              (rule 4)

	Delimiter      reduce using rule 4


State 29

	value -> Register .                                 (rule 3)
	instruction -> Register Assign Register . Plus value    (rule 5)

	Delimiter      reduce using rule 3
	Plus           shift, and enter state 30


State 30

	instruction -> Register Assign Register Plus . value    (rule 5)

	Int            shift, and enter state 2
	Name           shift, and enter state 24
	Register       shift, and enter state 25

	value          goto state 33

State 31

	instruction -> If Register Jump value .             (rule 6)

	Delimiter      reduce using rule 6


State 32

	instructionSeq -> Name Colon Delimiter instructions Jump value .    (rule 8)

	Delimiter      reduce using rule 8
	%eof           reduce using rule 8


State 33

	instruction -> Register Assign Register Plus value .    (rule 5)

	Delimiter      reduce using rule 5


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 16
Number of terminals: 9
Number of non-terminals: 7
Number of states: 34
