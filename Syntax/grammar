-----------------------------------------------------------------------------
Info file generated by Happy Version 1.18.2 from Syntax/Parser.y
-----------------------------------------------------------------------------


-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_parse -> program1                           (0)
	value -> Int                                       (1)
	value -> Name                                      (2)
	value -> Register                                  (3)
	instruction -> Register Assign value               (4)
	instruction -> Register Assign Register Plus value   (5)
	instruction -> If Register Jump value              (6)
	instruction -> Name Colon                          (7)
	instruction1 -> instruction                        (8)
	instruction1 -> instructionLabel                   (9)
	instructionLabel -> Name Colon instruction         (10)
	instructionSeq -> Jump value                       (11)
	instructionSeq -> instruction1 Delimiter instructionSeq   (12)
	program -> instructionSeq                          (13)
	program -> instructionSeq Delimiter                (14)
	program -> instructionSeq Delimiter program        (15)
	program1 -> program                                (16)
	program1 -> Delimiter program                      (17)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	Assign         { (_,TkAssign) }
	Colon          { (_,TkColon) }
	Delimiter      { (_,TkDelimiter) }
	If             { (_,TkIf) }
	Int            { (_,TkInt $$) }
	Jump           { (_,TkJump) }
	Name           { (_,TkName $$) }
	Register       { (_,TkRegister $$) }
	Plus           { (_,TkPlus) }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_parse    rule  0
	value           rules 1, 2, 3
	instruction     rules 4, 5, 6, 7
	instruction1    rules 8, 9
	instructionLabel rule  10
	instructionSeq  rules 11, 12
	program         rules 13, 14, 15
	program1        rules 16, 17

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0


	Delimiter      shift, and enter state 9
	If             shift, and enter state 10
	Jump           shift, and enter state 11
	Name           shift, and enter state 12
	Register       shift, and enter state 13

	instruction    goto state 3
	instruction1   goto state 4
	instructionLabelgoto state 5
	instructionSeq goto state 6
	program        goto state 7
	program1       goto state 8

State 1


	Int            shift, and enter state 2


State 2

	value -> Int .                                      (rule 1)

	Delimiter      reduce using rule 1
	%eof           reduce using rule 1


State 3

	instruction1 -> instruction .                       (rule 8)

	Delimiter      reduce using rule 8


State 4

	instructionSeq -> instruction1 . Delimiter instructionSeq    (rule 12)

	Delimiter      shift, and enter state 22


State 5

	instruction1 -> instructionLabel .                  (rule 9)

	Delimiter      reduce using rule 9


State 6

	program -> instructionSeq .                         (rule 13)
	program -> instructionSeq . Delimiter               (rule 14)
	program -> instructionSeq . Delimiter program       (rule 15)

	Delimiter      shift, and enter state 21
	%eof           reduce using rule 13


State 7

	program1 -> program .                               (rule 16)

	%eof           reduce using rule 16


State 8

	%start_parse -> program1 .                          (rule 0)

	%eof           accept


State 9

	program1 -> Delimiter . program                     (rule 17)

	If             shift, and enter state 10
	Jump           shift, and enter state 11
	Name           shift, and enter state 12
	Register       shift, and enter state 13

	instruction    goto state 3
	instruction1   goto state 4
	instructionLabelgoto state 5
	instructionSeq goto state 6
	program        goto state 20

State 10

	instruction -> If . Register Jump value             (rule 6)

	Register       shift, and enter state 19


State 11

	instructionSeq -> Jump . value                      (rule 11)

	Int            shift, and enter state 2
	Name           shift, and enter state 17
	Register       shift, and enter state 18

	value          goto state 16

State 12

	instruction -> Name . Colon                         (rule 7)
	instructionLabel -> Name . Colon instruction        (rule 10)

	Colon          shift, and enter state 15


State 13

	instruction -> Register . Assign value              (rule 4)
	instruction -> Register . Assign Register Plus value    (rule 5)

	Assign         shift, and enter state 14


State 14

	instruction -> Register Assign . value              (rule 4)
	instruction -> Register Assign . Register Plus value    (rule 5)

	Int            shift, and enter state 2
	Name           shift, and enter state 17
	Register       shift, and enter state 29

	value          goto state 28

State 15

	instruction -> Name Colon .                         (rule 7)
	instructionLabel -> Name Colon . instruction        (rule 10)

	Delimiter      reduce using rule 7
	If             shift, and enter state 10
	Name           shift, and enter state 27
	Register       shift, and enter state 13

	instruction    goto state 26

State 16

	instructionSeq -> Jump value .                      (rule 11)

	Delimiter      reduce using rule 11
	%eof           reduce using rule 11


State 17

	value -> Name .                                     (rule 2)

	Delimiter      reduce using rule 2
	%eof           reduce using rule 2


State 18

	value -> Register .                                 (rule 3)

	Delimiter      reduce using rule 3
	%eof           reduce using rule 3


State 19

	instruction -> If Register . Jump value             (rule 6)

	Jump           shift, and enter state 25


State 20

	program1 -> Delimiter program .                     (rule 17)

	%eof           reduce using rule 17


State 21

	program -> instructionSeq Delimiter .               (rule 14)
	program -> instructionSeq Delimiter . program       (rule 15)

	If             shift, and enter state 10
	Jump           shift, and enter state 11
	Name           shift, and enter state 12
	Register       shift, and enter state 13
	%eof           reduce using rule 14

	instruction    goto state 3
	instruction1   goto state 4
	instructionLabelgoto state 5
	instructionSeq goto state 6
	program        goto state 24

State 22

	instructionSeq -> instruction1 Delimiter . instructionSeq    (rule 12)

	If             shift, and enter state 10
	Jump           shift, and enter state 11
	Name           shift, and enter state 12
	Register       shift, and enter state 13

	instruction    goto state 3
	instruction1   goto state 4
	instructionLabelgoto state 5
	instructionSeq goto state 23

State 23

	instructionSeq -> instruction1 Delimiter instructionSeq .    (rule 12)

	Delimiter      reduce using rule 12
	%eof           reduce using rule 12


State 24

	program -> instructionSeq Delimiter program .       (rule 15)

	%eof           reduce using rule 15


State 25

	instruction -> If Register Jump . value             (rule 6)

	Int            shift, and enter state 2
	Name           shift, and enter state 17
	Register       shift, and enter state 18

	value          goto state 32

State 26

	instructionLabel -> Name Colon instruction .        (rule 10)

	Delimiter      reduce using rule 10


State 27

	instruction -> Name . Colon                         (rule 7)

	Colon          shift, and enter state 31


State 28

	instruction -> Register Assign value .              (rule 4)

	Delimiter      reduce using rule 4


State 29

	value -> Register .                                 (rule 3)
	instruction -> Register Assign Register . Plus value    (rule 5)

	Delimiter      reduce using rule 3
	Plus           shift, and enter state 30


State 30

	instruction -> Register Assign Register Plus . value    (rule 5)

	Int            shift, and enter state 2
	Name           shift, and enter state 17
	Register       shift, and enter state 18

	value          goto state 33

State 31

	instruction -> Name Colon .                         (rule 7)

	Delimiter      reduce using rule 7


State 32

	instruction -> If Register Jump value .             (rule 6)

	Delimiter      reduce using rule 6


State 33

	instruction -> Register Assign Register Plus value .    (rule 5)

	Delimiter      reduce using rule 5


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 18
Number of terminals: 9
Number of non-terminals: 8
Number of states: 34
