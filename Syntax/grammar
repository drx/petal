-----------------------------------------------------------------------------
Info file generated by Happy Version 1.18.2 from Syntax/Parser.y
-----------------------------------------------------------------------------


-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_parse -> program                            (0)
	value -> Int                                       (1)
	value -> Name                                      (2)
	value -> Register                                  (3)
	instruction -> Register Assign value               (4)
	instruction -> Register Assign Register Plus value   (5)
	instruction -> If Register Jump value              (6)
	instructionSeq -> Jump value                       (7)
	instructionSeq -> instruction Delimiter instructionSeq   (8)
	program -> instructionSeq                          (9)
	program -> instructionSeq Delimiter                (10)
	program -> instructionSeq Delimiter program        (11)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	Assign         { (_,TkAssign) }
	Delimiter      { (_,TkDelimiter) }
	If             { (_,TkIf) }
	Int            { (_,TkInt $$) }
	Jump           { (_,TkJump) }
	Name           { (_,TkName $$) }
	Register       { (_,TkRegister $$) }
	Plus           { (_,TkPlus) }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_parse    rule  0
	value           rules 1, 2, 3
	instruction     rules 4, 5, 6
	instructionSeq  rules 7, 8
	program         rules 9, 10, 11

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0


	If             shift, and enter state 6
	Jump           shift, and enter state 7
	Register       shift, and enter state 8

	instruction    goto state 3
	instructionSeq goto state 4
	program        goto state 5

State 1


	Int            shift, and enter state 2


State 2

	value -> Int .                                      (rule 1)

	Delimiter      reduce using rule 1
	%eof           reduce using rule 1


State 3

	instructionSeq -> instruction . Delimiter instructionSeq    (rule 8)

	Delimiter      shift, and enter state 15


State 4

	program -> instructionSeq .                         (rule 9)
	program -> instructionSeq . Delimiter               (rule 10)
	program -> instructionSeq . Delimiter program       (rule 11)

	Delimiter      shift, and enter state 14
	%eof           reduce using rule 9


State 5

	%start_parse -> program .                           (rule 0)

	%eof           accept


State 6

	instruction -> If . Register Jump value             (rule 6)

	Register       shift, and enter state 13


State 7

	instructionSeq -> Jump . value                      (rule 7)

	Int            shift, and enter state 2
	Name           shift, and enter state 11
	Register       shift, and enter state 12

	value          goto state 10

State 8

	instruction -> Register . Assign value              (rule 4)
	instruction -> Register . Assign Register Plus value    (rule 5)

	Assign         shift, and enter state 9


State 9

	instruction -> Register Assign . value              (rule 4)
	instruction -> Register Assign . Register Plus value    (rule 5)

	Int            shift, and enter state 2
	Name           shift, and enter state 11
	Register       shift, and enter state 20

	value          goto state 19

State 10

	instructionSeq -> Jump value .                      (rule 7)

	Delimiter      reduce using rule 7
	%eof           reduce using rule 7


State 11

	value -> Name .                                     (rule 2)

	Delimiter      reduce using rule 2
	%eof           reduce using rule 2


State 12

	value -> Register .                                 (rule 3)

	Delimiter      reduce using rule 3
	%eof           reduce using rule 3


State 13

	instruction -> If Register . Jump value             (rule 6)

	Jump           shift, and enter state 18


State 14

	program -> instructionSeq Delimiter .               (rule 10)
	program -> instructionSeq Delimiter . program       (rule 11)

	If             shift, and enter state 6
	Jump           shift, and enter state 7
	Register       shift, and enter state 8
	%eof           reduce using rule 10

	instruction    goto state 3
	instructionSeq goto state 4
	program        goto state 17

State 15

	instructionSeq -> instruction Delimiter . instructionSeq    (rule 8)

	If             shift, and enter state 6
	Jump           shift, and enter state 7
	Register       shift, and enter state 8

	instruction    goto state 3
	instructionSeq goto state 16

State 16

	instructionSeq -> instruction Delimiter instructionSeq .    (rule 8)

	Delimiter      reduce using rule 8
	%eof           reduce using rule 8


State 17

	program -> instructionSeq Delimiter program .       (rule 11)

	%eof           reduce using rule 11


State 18

	instruction -> If Register Jump . value             (rule 6)

	Int            shift, and enter state 2
	Name           shift, and enter state 11
	Register       shift, and enter state 12

	value          goto state 22

State 19

	instruction -> Register Assign value .              (rule 4)

	Delimiter      reduce using rule 4


State 20

	value -> Register .                                 (rule 3)
	instruction -> Register Assign Register . Plus value    (rule 5)

	Delimiter      reduce using rule 3
	Plus           shift, and enter state 21


State 21

	instruction -> Register Assign Register Plus . value    (rule 5)

	Int            shift, and enter state 2
	Name           shift, and enter state 11
	Register       shift, and enter state 12

	value          goto state 23

State 22

	instruction -> If Register Jump value .             (rule 6)

	Delimiter      reduce using rule 6


State 23

	instruction -> Register Assign Register Plus value .    (rule 5)

	Delimiter      reduce using rule 5


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 12
Number of terminals: 8
Number of non-terminals: 5
Number of states: 24
